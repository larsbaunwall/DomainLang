// ============================================================================
// Banking System - Real-World DomainLang Example
// ============================================================================
// This model demonstrates a comprehensive banking domain with multiple
// bounded contexts, regulatory compliance, and complex integration patterns.

// ============================================================================
// Strategic Classifications
// ============================================================================

Classification CoreDomain
Classification SupportingDomain
Classification GenericDomain

Classification HighlyRegulated
Classification MissionCritical

// ============================================================================
// Teams
// ============================================================================

Team CoreBankingTeam
Team PaymentsTeam
Team ComplianceTeam
Team CustomerServiceTeam
Team FraudDetectionTeam

// ============================================================================
// Domain Hierarchy
// ============================================================================

Domain Banking {
    description: "Core banking operations and services"
    vision: "Provide secure, reliable, and compliant banking services"
    classifier: CoreDomain
}

Domain CustomerAccounts in Banking {
    description: "Customer account management and transactions"
    classifier: CoreDomain
}

Domain Payments in Banking {
    description: "Payment processing and transfers"
    classifier: CoreDomain
}

Domain Compliance in Banking {
    description: "Regulatory compliance and reporting"
    classifier: SupportingDomain
}

// ============================================================================
// Core Banking Contexts
// ============================================================================

BC AccountManagement for CustomerAccounts
    as CoreDomain
    by CoreBankingTeam {

    description: "Manages customer accounts, balances, and account lifecycle"

    terminology {
        term Account: "Customer financial account"
            aka: BankAccount, CustomerAccount
            examples: "Checking Account #123456", "Savings Account #789012"

        term AccountHolder: "Person or entity owning the account"
            aka: Customer, AccountOwner

        term Balance: "Current amount of money in account"
            aka: AccountBalance, AvailableFunds

        term Transaction: "Financial operation affecting account balance"
            aka: BankTransaction, Operation
            examples: "Deposit $500", "Withdrawal $200", "Transfer $1000"

        term AccountStatus: "Current state of account"
            examples: "Active", "Frozen", "Closed", "Dormant"
    }

    classifiers {
        role: CoreDomain
        businessModel: MissionCritical
        evolution: HighlyRegulated
    }

    decisions {
        decision [architectural] EventSourcing:
            "Use event sourcing to maintain complete transaction history"

        decision [technical] PostgreSQL:
            "Use PostgreSQL for ACID transaction guarantees"

        decision [security] EncryptionAtRest:
            "Encrypt all account data at rest using AES-256"

        policy [business] NegativeBalanceProhibited:
            "Prevent overdrafts without overdraft protection"

        policy [business] DormantAccountPolicy:
            "Mark accounts dormant after 12 months of inactivity"

        rule [compliance] KYC:
            "Know Your Customer verification required for all accounts"

        rule [compliance] DataRetention:
            "Retain transaction records for 7 years per banking regulations"

        rule [compliance] AuditTrail:
            "Maintain immutable audit trail of all account operations"
    }
}

BC PaymentProcessing for Payments
    as CoreDomain
    by PaymentsTeam {

    description: "Processes domestic and international payments"

    terminology {
        term Payment: "Transfer of funds between accounts"
            aka: MoneyTransfer, FundTransfer

        term PaymentMethod: "Mechanism used for payment"
            examples: "Wire Transfer", "ACH", "SWIFT", "Real-Time Payment"

        term PaymentStatus: "Current state of payment processing"
            examples: "Pending", "Processing", "Completed", "Failed", "Reversed"

        term Beneficiary: "Recipient of payment"
            aka: Payee, Recipient

        term Remittance: "Information about payment purpose"
            aka: PaymentDetails, TransactionReference
    }

    classifiers {
        role: CoreDomain
        businessModel: MissionCritical
        evolution: HighlyRegulated
    }

    decisions {
        decision [architectural] SagaPattern:
            "Use saga pattern for distributed payment transactions"

        decision [technical] Kafka:
            "Use Kafka for reliable payment event streaming"

        policy [business] PaymentLimits:
            "Daily transfer limits: $10,000 domestic, $5,000 international"

        policy [business] CutoffTimes:
            "Same-day processing cutoff at 5 PM local time"

        rule [compliance] AML:
            "Anti-Money Laundering checks for transactions over $3,000"

        rule [compliance] OFAC:
            "Screen all international payments against OFAC sanctions list"

        rule [security] TwoFactorAuth:
            "Require 2FA for transactions over $1,000"
    }
}

BC FraudDetection for Compliance
    as CoreDomain
    by FraudDetectionTeam {

    description: "Real-time fraud detection and prevention"

    terminology {
        term FraudScore: "Risk score indicating likelihood of fraud"
            examples: "Low (0-30)", "Medium (31-70)", "High (71-100)"

        term FraudAlert: "Notification of suspected fraudulent activity"
            aka: SuspiciousActivityAlert

        term RiskProfile: "Customer's historical risk assessment"

        term FraudRule: "Automated rule for detecting fraud patterns"
            examples: "Multiple large withdrawals in 24 hours"
    }

    decisions {
        decision [technical] MachineLearning:
            "Use ML models for real-time fraud detection"

        decision [technical] StreamProcessing:
            "Process transactions in real-time using stream processing"

        policy [business] AutomaticBlocking:
            "Automatically block transactions with fraud score > 90"

        rule [compliance] SARFiling:
            "File Suspicious Activity Report within 30 days of detection"
    }
}

BC ComplianceReporting for Compliance
    as SupportingDomain
    by ComplianceTeam {

    description: "Regulatory reporting and audit management"

    terminology {
        term RegulatoryReport: "Mandatory report to financial authorities"
            examples: "Call Report", "CTR", "SAR"

        term CTR: "Currency Transaction Report for transactions over $10,000"
            aka: CurrencyTransactionReport

        term SAR: "Suspicious Activity Report for potential fraud"
            aka: SuspiciousActivityReport

        term AuditLog: "Immutable record of system activities"
    }

    decisions {
        decision [technical] DataWarehouse:
            "Use dedicated data warehouse for compliance reporting"

        rule [compliance] CTRFiling:
            "File CTR within 15 days of transaction over $10,000"

        rule [compliance] SARFiling:
            "File SAR within 30 days of suspicious activity detection"
    }
}

BC CustomerService for CustomerAccounts
    as SupportingDomain
    by CustomerServiceTeam {

    description: "Customer support and account assistance"

    terminology {
        term ServiceRequest: "Customer inquiry or issue"
            aka: Ticket, Case

        term AccountInquiry: "Request for account information"

        term DisputeResolution: "Process for resolving transaction disputes"
    }

    decisions {
        policy [business] ResponseTime:
            "Respond to customer inquiries within 24 hours"

        policy [business] DisputeWindow:
            "Accept transaction disputes within 60 days"
    }
}

BC CardManagement for Payments
    as CoreDomain
    by PaymentsTeam {

    description: "Debit and credit card lifecycle management"

    terminology {
        term Card: "Physical or virtual payment card"
            aka: DebitCard, CreditCard
            examples: "Debit Card #1234-5678-9012-3456"

        term CardLimit: "Maximum spending limit on card"

        term CardStatus: "Current state of card"
            examples: "Active", "Blocked", "Expired", "Lost", "Stolen"

        term PIN: "Personal Identification Number for card security"
    }

    decisions {
        decision [security] EMVChip:
            "Use EMV chip technology for all cards"

        policy [business] InstantCardBlocking:
            "Allow customers to instantly block cards via mobile app"

        rule [compliance] PCIDSSCompliance:
            "Maintain PCI-DSS Level 1 compliance for card data"
    }
}

// ============================================================================
// Context Maps
// ============================================================================

ContextMap CoreBankingOperations {
    contains AccountManagement, PaymentProcessing, FraudDetection

    // Account management provides account data to payments
    [OHS, PL] AccountManagement -> [ACL] PaymentProcessing

    // Fraud detection monitors all transactions
    PaymentProcessing -> FraudDetection
    AccountManagement -> FraudDetection

    // Fraud detection can block accounts/payments
    FraudDetection -> AccountManagement
    FraudDetection -> PaymentProcessing
}

ContextMap ComplianceAndReporting {
    contains AccountManagement, PaymentProcessing, FraudDetection, ComplianceReporting

    // Compliance reporting consumes data from operational contexts
    AccountManagement -> ComplianceReporting
    PaymentProcessing -> ComplianceReporting
    FraudDetection -> ComplianceReporting
}

ContextMap CustomerInteractions {
    contains AccountManagement, CustomerService, CardManagement

    // Customer service needs account information
    [OHS] AccountManagement -> [ACL] CustomerService

    // Card management linked to accounts
    [SK] CardManagement <-> AccountManagement : SharedKernel

    // Customer service helps with card issues
    CustomerService -> CardManagement
}

ContextMap PaymentEcosystem {
    contains PaymentProcessing, CardManagement, AccountManagement

    // Card transactions affect accounts
    CardManagement -> PaymentProcessing
    PaymentProcessing -> AccountManagement

    // Shared payment models
    [SK] PaymentProcessing <-> CardManagement : SharedKernel
}

// ============================================================================
// Domain Map
// ============================================================================

DomainMap BankingPortfolio {
    contains Banking, CustomerAccounts, Payments, Compliance
}
