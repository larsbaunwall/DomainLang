/**
 * DomainLang Import Examples
 * 
 * Demonstrates all supported import syntaxes in the modern git-native system.
 */

// ═══════════════════════════════════════════════════════════════════════════
// 1. LOCAL FILE IMPORTS
// ═══════════════════════════════════════════════════════════════════════════

// Relative to current file
import "./shared/classifications.dlang"
import "../domains/customer.dlang"

// With alias for disambiguation
import "./shared/types.dlang" as SharedTypes
import "../other-context/types.dlang" as OtherTypes

// ═══════════════════════════════════════════════════════════════════════════
// 2. WORKSPACE-RELATIVE IMPORTS
// ═══════════════════════════════════════════════════════════════════════════

// ~ refers to workspace root (where dlang.toml or .git is located)
import "~/contexts/sales.dlang"
import "~/shared/patterns.dlang" as CommonPatterns
import "~/domains/core-domains.dlang"

// ═══════════════════════════════════════════════════════════════════════════
// 3. GITHUB REPOSITORY IMPORTS (Shorthand Syntax)
// ═══════════════════════════════════════════════════════════════════════════

// Owner/repo shorthand with version tag (GitHub host assumed)
import "ddd-patterns/core@v2.1.0" as DDDPatterns

// Repository imports load the default entry defined in the package's model.yaml

// Pin to a specific commit for reproducibility
import "ddd-patterns/core@abc123def456"

// Default to main branch (useful for development)
import "ddd-patterns/core"

// Bring in another GitHub package with an alias
import "event-sourcing/patterns@v1.5.0" as EventPatterns

// Use the friendly name from model.yaml (maps to source + version)
import "ddd-patterns" as PatternLibrary
import "ddd-patterns/patterns.dlang"

// ═══════════════════════════════════════════════════════════════════════════
// 4. GITLAB IMPORTS (Full HTTPS URLs)
// ═══════════════════════════════════════════════════════════════════════════

import "https://gitlab.com/company/shared-domains@v1.0.0" as SharedDomains
import "https://gitlab.com/company/shared-domains@main"

// ═══════════════════════════════════════════════════════════════════════════
// 5. BITBUCKET IMPORTS (Full HTTPS URLs)
// ═══════════════════════════════════════════════════════════════════════════

import "https://bitbucket.org/team/domain-models@release-2.0" as DomainModels

// ═══════════════════════════════════════════════════════════════════════════
// 6. FULL GIT URLs (Alternative Syntax)
// ═══════════════════════════════════════════════════════════════════════════

// Full GitHub URL
import "https://github.com/ddd-patterns/core@v2.1.0"

// Full GitLab URL
import "https://gitlab.com/company/domains@v1.0.0"

// Full Bitbucket URL
import "https://bitbucket.org/team/models@main"

// ═══════════════════════════════════════════════════════════════════════════
// 7. NAMED IMPORTS (Future Enhancement)
// ═══════════════════════════════════════════════════════════════════════════

// Import specific symbols
// import { AggregatePattern, EntityPattern, ValueObjectPattern } from "ddd-patterns/core@v2.1.0"

// Import specific symbols from local file
// import { CustomerDomain, OrderDomain } from "./domains/core.dlang"

// ═══════════════════════════════════════════════════════════════════════════
// USING IMPORTED PATTERNS
// ═══════════════════════════════════════════════════════════════════════════

// Define a domain using standard DDD patterns from external library
Domain EcommerceDomain {
  description: "E-commerce domain model"
}

// Use imported patterns in bounded context
BC OrderContext for EcommerceDomain {
  description: "Order management context"
  
  // Reference classifications from imported file
  classifiers {
    role: DDDPatterns.AggregateRoot
    strategy: EventPatterns.EventSourcedAggregate
  }
  
  terminology {
    term Order: "A customer's purchase request"
    term OrderLine: "Individual item in an order"
  }
}

// Another context using shared types
BC PaymentContext for EcommerceDomain {
  description: "Payment processing context"
  
  classifiers {
    role: SharedTypes.CoreContext
  }
}

// Context map showing relationships
ContextMap EcommerceMap {
  OrderContext U/D PaymentContext
  
  contains EcommerceDomain
}
