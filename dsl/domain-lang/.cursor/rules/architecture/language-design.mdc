---
description: 
globs: *.dlang,*.langium,*.ts
alwaysApply: false
---

## Language design
Use these rules when designing the grammar:

Use `.dlang` as the official file extension. Register it in Langiumâ€™s LanguageMetaData.

Define grammar with block-based readable syntax for Domain, BoundedContext, Classification, Role, ContextMap, PackageDeclaration.

Allow nested `package` declarations. Support imports with syntax:
  import Strategic from './types.dlang'
  import * from 'acme-ddd'

Use fully qualified names for cross-package references, e.g. acme.sales.Sales.

Implement ScopeComputation and ScopeProvider to resolve:
  - References within and across packages
  - Symbols from imported files
  - npm-based .dlang modules

Ensure scope resolution supports FQN disambiguation. Avoid naming collisions by enforcing qualified paths in global scope.

Implement validations for:
  - Circular Domain.partof references
  - Invalid classifier assignments
  - Duplicate identifiers in a package
  - Unresolved or ambiguous references

Add hover support to show `description` fields and import origin for all named entities.

Provide context-aware completions:
  - Domain types in `implements`
  - Classifications in `classifiers {}` blocks
  - Known terms in `terminology {}`

Register all .dlang files in workspace for document services. Use LangiumDocuments for resolution, tracking, and caching.

Generate CLI commands:
  domainlang validate path/to/file.dlang
  domainlang emit --format ts|json path/to/file.dlang

Emit output as:
  - TypeScript object tree
  - JSON model
  - Optional UML/Mermaid/Graphviz

Scaffold VS Code extension using Langium CLI. Include diagnostics, semantic tokens, hover, go-to-definition, and auto-import resolution.

Use LangiumTest for unit tests on parsing, scope resolution, and validator behavior.

Enforce TypeScript strict mode. Follow naming conventions:
  - PascalCase for types
  - camelCase for identifiers
  - Avoid inline side effects

Regenerate services with:
  npm run langium:generate

Include DSL documentation and examples in `docs/` and `examples/`. Maintain changelog for grammar evolution.

Enable reuse by publishing `.dlang` modules as npm packages. Support node-style resolution.

Ensure imported types use unique names or FQN to avoid local collisions.

Use SemVer for language versioning. CLI should warn on incompatible grammar revisions.

Encourage prompts to reference `@filename`, stay focused on small changes, and use Composer for cross-file edits.